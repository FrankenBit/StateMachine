// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IStateTransition.cs" company="FrankenBit">
//     FrankenBit (c) 2020
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using System;

using JetBrains.Annotations;

namespace FrankenBit.Utilities
{
    /// <summary>
    ///     Interface for a state transition generated by a state machine.
    /// </summary>
    /// <typeparam name="TState">
    ///     Type of the state the transition is originating from.
    /// </typeparam>
    public interface IStateTransition<out TState>
    {
        /// <summary>
        ///     Add another <paramref name="state"/> to transition to when the specified
        ///     <paramref name="condition" /> evaluates to <see langword="true" />.
        /// </summary>
        /// <param name="condition">
        ///     Condition required to be met to reach the supplied <paramref name="state" />.
        /// </param>
        /// <param name="state">
        ///     State to transition to when the specified <paramref name="condition" /> is met.
        /// </param>
        void ButWhen( [NotNull] Func<TState, bool> condition, [NotNull] IState state );

        /// <summary>
        ///     Specify the <paramref name="condition"/> to be met for the transition to be available.
        /// </summary>
        /// <param name="condition">
        ///     Condition that has to be met to make the transition available.
        /// </param>
        void When( [NotNull] Func<TState, bool> condition );
    }
}